## our overarching VC interface that acts agnostic of our proof type
interface VerifiableCredential
  @createModel(description: "A verifiable credential interface") {
  controller: DID! @documentAccount
  issuer: Issuer!
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
}

type Issuer {
  id: String! @string(maxLength: 1000)
  name: String @string(maxLength: 1000)
}

type CredentialStatus {
  id: String! @string(maxLength: 1000)
  type: String! @string(maxLength: 1000)
  statusIssuer: StatusIssuer
  revocationNonce: Int
}

type StatusIssuer {
  id: String! @string(maxLength: 1000)
  type: String! @string(maxLength: 1000)
  revocationNonce: Int!
}

type CredentialSchema {
  id: String! @string(maxLength: 1000)
  type: String! @string(maxLength: 1000)
}

## we'll use interfaces for our proof types to generalize them as well - this one's for EIP712
interface VCEIP712Proof implements VerifiableCredential
  @createModel(
    description: "A verifiable credential interface of type EIP712"
  ) {
  controller: DID! @documentAccount
  issuer: Issuer!
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  proof: ProofEIP712!
}

## generalized JWT proof interface
interface VCJWTProof implements VerifiableCredential
  @createModel(description: "A verifiable credential interface of type JWT") {
  controller: DID! @documentAccount
  issuer: Issuer!
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  proof: ProofJWT!
}

## generalized JWZ proof interface
interface VCJWZProof implements VerifiableCredential
  @createModel(
    description: "A verifiable credential interface of type JWZ by PolygonID"
  ) {
  controller: DID! @documentAccount
  issuer: Issuer!
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  proofBJJ: [ProofBJJ!] @list(maxLength: 100)
  proofMTP: [ProofMTP!] @list(maxLength: 100)
  refreshService: RefreshService
  credentialId: String! @string(maxLength: 1000)
}

type ProofEIP712 {
  verificationMethod: String! @string(maxLength: 1000)
  created: DateTime!
  proofPurpose: String! @string(maxLength: 1000)
  type: String! @string(maxLength: 1000)
  proofValue: String! @string(maxLength: 1000)
  eip712: EIP712!
}

type ProofJWT {
  type: String! @string(maxLength: 1000)
  jwt: String! @string(maxLength: 100000)
}

type ProofBJJ {
  type: String! @string(maxLength: 1000)
  issuerData: IssuerDataBJJ!
  coreClaim: String! @string(maxLength: 1000)
  signature: String! @string(maxLength: 1000)
}

type ProofMTP {
  type: String! @string(maxLength: 1000)
  issuerData: IssuerDataMTP!
  coreClaim: String! @string(maxLength: 1000)
  mtp: MTP!
}

type Proof

type IssuerDataBJJ {
  id: String! @string(maxLength: 1000)
  state: BJJState!
  authCoreClaim: String! @string(maxLength: 1000)
  mtp: MTP!
  credentialStatus: CredentialStatus!
}

type IssuerDataMTP {
  id: String! @string(maxLength: 1000)
  state: MTPState!
}

type BJJState {
  claimsTreeRoot: String! @string(maxLength: 1000)
  value: String! @string(maxLength: 1000)
}

type MTPState {
  txId: String! @string(maxLength: 1000)
  blockTimestamp: Int!
  blockNumber: Int!
  rootOfRoots: String! @string(maxLength: 1000)
  claimsTreeRoot: String! @string(maxLength: 1000)
  revocationTreeRoot: String! @string(maxLength: 1000)
  value: String! @string(maxLength: 1000)
}

type MTP {
  existence: Boolean!
  siblings: [String]! @string(maxLength: 1000) @list(maxLength: 100)
}

type RefreshService {
  id: String! @string(maxLength: 1000)
  type: String! @string(maxLength: 1000)
}

type EIP712 {
  domain: Domain!
  types: ProofTypes!
  primaryType: String! @string(maxLength: 100)
}

type Types {
  name: String! @string(maxLength: 100)
  type: String! @string(maxLength: 100)
}

type ProofTypes {
  EIP712Domain: [Types!]! @list(maxLength: 100)
  CredentialSchema: [Types!]! @list(maxLength: 100)
  CredentialSubject: [Types!]! @list(maxLength: 100)
  Proof: [Types!]! @list(maxLength: 100)
  VerifiableCredential: [Types!]! @list(maxLength: 100)
}

type Domain {
  chainId: Int!
  name: String! @string(maxLength: 100)
  version: String! @string(maxLength: 100)
}

scalar JSON

type CredentialSubject {
  id: DID! @accountReference
  isTrusted: Boolean!
}

## define our EIP712 type that uses a hard-coded credentialSubject specific to our use case
type VerifiableCredentialEIP712 implements VerifiableCredential & VCEIP712Proof
  @createModel(
    accountRelation: LIST
    description: "A verifiable credential of type EIP712"
  )
  @createIndex(fields: [{ path: "issuanceDate" }])
  @createIndex(fields: [{ path: "issuer" }]) {
  controller: DID! @documentAccount
  issuer: Issuer!
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  proof: ProofEIP712!
  credentialSubject: CredentialSubject!
}

## define our JWT type that uses a hard-coded credentialSubject specific to our use case
type VerifiableCredentialJWT implements VerifiableCredential & VCJWTProof
  @createModel(
    accountRelation: LIST
    description: "A verifiable credential of type JWT"
  )
  @createIndex(fields: [{ path: "issuanceDate" }])
  @createIndex(fields: [{ path: "issuer" }]) {
  controller: DID! @documentAccount
  issuer: Issuer!
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  proof: ProofJWT!
  credentialSubject: CredentialSubject!
}

## define our JWT type that uses a hard-coded credentialSubject specific to our use case
## credentialID: id from polygonID VC
## PolygonID proof split into BJJ & MTP arrays
type VerifiableCredentialJWZ implements VerifiableCredential & VCJWZProof
  @createModel(
    accountRelation: LIST
    description: "A verifiable credential of type JWZ"
  )
  @createIndex(fields: [{ path: "issuanceDate" }])
  @createIndex(fields: [{ path: "issuer" }]) {
  controller: DID! @documentAccount
  issuer: Issuer!
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  proofBJJ: [ProofBJJ!] @list(maxLength: 100)
  proofMTP: [ProofMTP!] @list(maxLength: 100)
  credentialSubject: CredentialSubject!
  refreshService: RefreshService
  credentialId: String! @string(maxLength: 1000)
}
